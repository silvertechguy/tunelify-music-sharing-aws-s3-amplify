{"id":"AOL1","dependencies":[{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\package.json","includedInParent":true,"mtime":1602864672900},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\.babelrc","includedInParent":true,"mtime":1602860561937},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-sdk\\smithy-client\\package.json","includedInParent":true,"mtime":1602864669443}],"generated":{"js":"\"use strict\";function r(r,e,t){if(t<=0||!Number.isInteger(t))throw new Error(\"Invalid number of delimiters (\"+t+\") for splitEvery.\");var i=r.split(e);if(1===t)return i;for(var s=[],n=\"\",o=0;o<i.length;o++)\"\"===n?n=i[o]:n+=e+i[o],(o+1)%t==0&&(s.push(n),n=\"\");return\"\"!==n&&s.push(n),s}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.splitEvery=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":0}},{"source":"../../src/split-every.ts","name":null,"original":{"line":9,"column":6},"generated":{"line":1,"column":13}},{"source":"../../src/split-every.ts","name":null,"original":{"line":9,"column":16},"generated":{"line":1,"column":22}},{"source":"../../src/split-every.ts","name":null,"original":{"line":9,"column":27},"generated":{"line":1,"column":24}},{"source":"../../src/split-every.ts","name":null,"original":{"line":9,"column":42},"generated":{"line":1,"column":26}},{"source":"../../src/split-every.ts","name":null,"original":{"line":9,"column":61},"generated":{"line":1,"column":28}},{"source":"../../src/split-every.ts","name":null,"original":{"line":11,"column":6},"generated":{"line":1,"column":31}},{"source":"../../src/split-every.ts","name":null,"original":{"line":11,"column":6},"generated":{"line":1,"column":34}},{"source":"../../src/split-every.ts","name":null,"original":{"line":11,"column":23},"generated":{"line":1,"column":37}},{"source":"../../src/split-every.ts","name":null,"original":{"line":11,"column":29},"generated":{"line":1,"column":41}},{"source":"../../src/split-every.ts","name":null,"original":{"line":11,"column":36},"generated":{"line":1,"column":48}},{"source":"../../src/split-every.ts","name":null,"original":{"line":11,"column":46},"generated":{"line":1,"column":58}},{"source":"../../src/split-every.ts","name":null,"original":{"line":12,"column":10},"generated":{"line":1,"column":61}},{"source":"../../src/split-every.ts","name":null,"original":{"line":12,"column":10},"generated":{"line":1,"column":67}},{"source":"../../src/split-every.ts","name":null,"original":{"line":12,"column":14},"generated":{"line":1,"column":71}},{"source":"../../src/split-every.ts","name":null,"original":{"line":12,"column":20},"generated":{"line":1,"column":77}},{"source":"../../src/split-every.ts","name":null,"original":{"line":12,"column":55},"generated":{"line":1,"column":110}},{"source":"../../src/split-every.ts","name":null,"original":{"line":12,"column":71},"generated":{"line":1,"column":112}},{"source":"../../src/split-every.ts","name":null,"original":{"line":15,"column":8},"generated":{"line":1,"column":133}},{"source":"../../src/split-every.ts","name":null,"original":{"line":15,"column":8},"generated":{"line":1,"column":137}},{"source":"../../src/split-every.ts","name":null,"original":{"line":15,"column":19},"generated":{"line":1,"column":139}},{"source":"../../src/split-every.ts","name":null,"original":{"line":15,"column":25},"generated":{"line":1,"column":141}},{"source":"../../src/split-every.ts","name":null,"original":{"line":15,"column":31},"generated":{"line":1,"column":147}},{"source":"../../src/split-every.ts","name":null,"original":{"line":17,"column":6},"generated":{"line":1,"column":150}},{"source":"../../src/split-every.ts","name":null,"original":{"line":17,"column":24},"generated":{"line":1,"column":153}},{"source":"../../src/split-every.ts","name":null,"original":{"line":17,"column":6},"generated":{"line":1,"column":157}},{"source":"../../src/split-every.ts","name":null,"original":{"line":18,"column":11},"generated":{"line":1,"column":159}},{"source":"../../src/split-every.ts","name":null,"original":{"line":18,"column":11},"generated":{"line":1,"column":166}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":7},"generated":{"line":1,"column":168}},{"source":"../../src/split-every.ts","name":null,"original":{"line":21,"column":8},"generated":{"line":1,"column":172}},{"source":"../../src/split-every.ts","name":null,"original":{"line":21,"column":8},"generated":{"line":1,"column":176}},{"source":"../../src/split-every.ts","name":null,"original":{"line":21,"column":42},"generated":{"line":1,"column":178}},{"source":"../../src/split-every.ts","name":null,"original":{"line":22,"column":6},"generated":{"line":1,"column":181}},{"source":"../../src/split-every.ts","name":null,"original":{"line":22,"column":23},"generated":{"line":1,"column":183}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":11},"generated":{"line":1,"column":186}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":15},"generated":{"line":1,"column":188}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":18},"generated":{"line":1,"column":190}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":22},"generated":{"line":1,"column":192}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":31},"generated":{"line":1,"column":194}},{"source":"../../src/split-every.ts","name":null,"original":{"line":23,"column":39},"generated":{"line":1,"column":201}},{"source":"../../src/split-every.ts","name":null,"original":{"line":24,"column":27},"generated":{"line":1,"column":205}},{"source":"../../src/split-every.ts","name":null,"original":{"line":24,"column":8},"generated":{"line":1,"column":210}},{"source":"../../src/split-every.ts","name":null,"original":{"line":26,"column":6},"generated":{"line":1,"column":212}},{"source":"../../src/split-every.ts","name":null,"original":{"line":26,"column":23},"generated":{"line":1,"column":214}},{"source":"../../src/split-every.ts","name":null,"original":{"line":26,"column":32},"generated":{"line":1,"column":216}},{"source":"../../src/split-every.ts","name":null,"original":{"line":29,"column":6},"generated":{"line":1,"column":219}},{"source":"../../src/split-every.ts","name":null,"original":{"line":29,"column":24},"generated":{"line":1,"column":222}},{"source":"../../src/split-every.ts","name":null,"original":{"line":29,"column":36},"generated":{"line":1,"column":224}},{"source":"../../src/split-every.ts","name":null,"original":{"line":29,"column":45},"generated":{"line":1,"column":226}},{"source":"../../src/split-every.ts","name":null,"original":{"line":32,"column":9},"generated":{"line":1,"column":230}},{"source":"../../src/split-every.ts","name":null,"original":{"line":32,"column":13},"generated":{"line":1,"column":232}},{"source":"../../src/split-every.ts","name":null,"original":{"line":32,"column":18},"generated":{"line":1,"column":235}},{"source":"../../src/split-every.ts","name":null,"original":{"line":32,"column":36},"generated":{"line":1,"column":238}},{"source":"../../src/split-every.ts","name":null,"original":{"line":34,"column":6},"generated":{"line":1,"column":242}},{"source":"../../src/split-every.ts","name":null,"original":{"line":34,"column":23},"generated":{"line":1,"column":244}},{"source":"../../src/split-every.ts","name":null,"original":{"line":34,"column":28},"generated":{"line":1,"column":249}},{"source":"../../src/split-every.ts","name":null,"original":{"line":36,"column":6},"generated":{"line":1,"column":252}},{"source":"../../src/split-every.ts","name":null,"original":{"line":36,"column":23},"generated":{"line":1,"column":254}},{"source":"../../src/split-every.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":1,"column":258}},{"source":"../../src/split-every.ts","name":null,"original":{"line":41,"column":25},"generated":{"line":1,"column":264}},{"source":"../../src/split-every.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":1,"column":269}},{"source":"../../src/split-every.ts","name":null,"original":{"line":42,"column":4},"generated":{"line":1,"column":272}},{"source":"../../src/split-every.ts","name":null,"original":{"line":42,"column":21},"generated":{"line":1,"column":274}},{"source":"../../src/split-every.ts","name":null,"original":{"line":42,"column":26},"generated":{"line":1,"column":279}},{"source":"../../src/split-every.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":1,"column":282}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":284}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":291}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":306}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":314}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":327}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":328}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":335}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":339}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":347}},{"source":"../../src/split-every.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":1,"column":358}}],"sources":{"../../src/split-every.ts":"/**\n * Given an input string, splits based on the delimiter after a given\n * number of delimiters has been encountered.\n *\n * @param value The input string to split.\n * @param delimiter The delimiter to split on.\n * @param numDelimiters The number of delimiters to have encountered to split.\n */\nexport function splitEvery(value: string, delimiter: string, numDelimiters: number): Array<string> {\n  // Fail if we don't have a clear number to split on.\n  if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {\n    throw new Error(\"Invalid number of delimiters (\" + numDelimiters + \") for splitEvery.\");\n  }\n\n  const segments = value.split(delimiter);\n  // Short circuit extra logic for the simple case.\n  if (numDelimiters === 1) {\n    return segments;\n  }\n\n  const compoundSegments: Array<string> = [];\n  let currentSegment = \"\";\n  for (let i = 0; i < segments.length; i++) {\n    if (currentSegment === \"\") {\n      // Start a new segment.\n      currentSegment = segments[i];\n    } else {\n      // Compound the current segment with the delimiter.\n      currentSegment += delimiter + segments[i];\n    }\n\n    if ((i + 1) % numDelimiters === 0) {\n      // We encountered the right number of delimiters, so add the entry.\n      compoundSegments.push(currentSegment);\n      // And reset the current segment.\n      currentSegment = \"\";\n    }\n  }\n\n  // Handle any leftover segment portion.\n  if (currentSegment !== \"\") {\n    compoundSegments.push(currentSegment);\n  }\n\n  return compoundSegments;\n}\n"},"lineCount":null}},"error":null,"hash":"361b2cff4da25735f1573b8a1038711b","cacheData":{"env":{}}}