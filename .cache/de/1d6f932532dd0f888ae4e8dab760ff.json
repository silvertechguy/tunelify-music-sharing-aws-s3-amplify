{"id":"node_modules/fast-xml-parser/src/validator.js","dependencies":[{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\package.json","includedInParent":true,"mtime":1602864672900},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\.babelrc","includedInParent":true,"mtime":1602860561937},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\package.json","includedInParent":true,"mtime":1602864668419},{"name":"./util","loc":{"line":3,"column":21},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\src\\validator.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\src\\util.js"}],"generated":{"js":"'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      if (xmlData[i] === '?') {\n        i = readPI(xmlData, ++i);\n        if (i.err) {\n          return i;\n        }\n      } else if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/fast-xml-parser/src/validator.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}}],"sources":{"node_modules/fast-xml-parser/src/validator.js":"'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      if (xmlData[i] === '?') {\n        i = readPI(xmlData, ++i);\n        if (i.err) {\n          return i;\n        }\n      } else if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n"},"lineCount":397}},"error":null,"hash":"4409c4840669aa28702daea8dd067495","cacheData":{"env":{}}}