{"id":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","dependencies":[{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\package.json","includedInParent":true,"mtime":1602864672900},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\.babelrc","includedInParent":true,"mtime":1602860561937},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\package.json","includedInParent":true,"mtime":1602864668419},{"name":"./util","loc":{"line":4,"column":29},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\src\\xmlstr2xmlnode.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\src\\util.js"},{"name":"./xmlNode","loc":{"line":5,"column":24},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\src\\xmlstr2xmlnode.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\fast-xml-parser\\src\\xmlNode.js"}],"generated":{"js":"'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.parseTrueNumberOnly\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/(\\r\\n)|\\n/, \" \");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).trimRight();\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}}],"sources":{"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js":"'use strict';\n\nconst util = require('./util');\nconst buildOptions = require('./util').buildOptions;\nconst xmlNode = require('./xmlNode');\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n  Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n  Number.parseFloat = window.parseFloat;\n}\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attrNodeName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  ignoreNameSpace: false,\n  allowBooleanAttributes: false, //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseNodeValue: true,\n  parseAttributeValue: false,\n  arrayMode: false,\n  trimValues: true, //Trim string values of tag and attributes\n  cdataTagName: false,\n  cdataPositionChar: '\\\\c',\n  tagValueProcessor: function(a, tagName) {\n    return a;\n  },\n  attrValueProcessor: function(a, attrName) {\n    return a;\n  },\n  stopNodes: []\n  //decodeStrict: false,\n};\n\nexports.defaultOptions = defaultOptions;\n\nconst props = [\n  'attributeNamePrefix',\n  'attrNodeName',\n  'textNodeName',\n  'ignoreAttributes',\n  'ignoreNameSpace',\n  'allowBooleanAttributes',\n  'parseNodeValue',\n  'parseAttributeValue',\n  'arrayMode',\n  'trimValues',\n  'cdataTagName',\n  'cdataPositionChar',\n  'tagValueProcessor',\n  'attrValueProcessor',\n  'parseTrueNumberOnly',\n  'stopNodes'\n];\nexports.props = props;\n\n/**\n * Trim -> valueProcessor -> parse value\n * @param {string} tagName\n * @param {string} val\n * @param {object} options\n */\nfunction processTagValue(tagName, val, options) {\n  if (val) {\n    if (options.trimValues) {\n      val = val.trim();\n    }\n    val = options.tagValueProcessor(val, tagName);\n    val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);\n  }\n\n  return val;\n}\n\nfunction resolveNameSpace(tagname, options) {\n  if (options.ignoreNameSpace) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\nfunction parseValue(val, shouldParse, parseTrueNumberOnly) {\n  if (shouldParse && typeof val === 'string') {\n    let parsed;\n    if (val.trim() === '' || isNaN(val)) {\n      parsed = val === 'true' ? true : val === 'false' ? false : val;\n    } else {\n      if (val.indexOf('0x') !== -1) {\n        //support hexa decimal\n        parsed = Number.parseInt(val, 16);\n      } else if (val.indexOf('.') !== -1) {\n        parsed = Number.parseFloat(val);\n        val = val.replace(/\\.?0+$/, \"\");\n      } else {\n        parsed = Number.parseInt(val, 10);\n      }\n      if (parseTrueNumberOnly) {\n        parsed = String(parsed) === val ? parsed : val;\n      }\n    }\n    return parsed;\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])(.*?)\\\\3)?', 'g');\n\nfunction buildAttributesMap(attrStr, options) {\n  if (!options.ignoreAttributes && typeof attrStr === 'string') {\n    attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = resolveNameSpace(matches[i][1], options);\n      if (attrName.length) {\n        if (matches[i][4] !== undefined) {\n          if (options.trimValues) {\n            matches[i][4] = matches[i][4].trim();\n          }\n          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);\n          attrs[options.attributeNamePrefix + attrName] = parseValue(\n            matches[i][4],\n            options.parseAttributeValue,\n            options.parseTrueNumberOnly\n          );\n        } else if (options.allowBooleanAttributes) {\n          attrs[options.attributeNamePrefix + attrName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (options.attrNodeName) {\n      const attrCollection = {};\n      attrCollection[options.attrNodeName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst getTraversalObj = function(xmlData, options) {\n  xmlData = xmlData.replace(/(\\r\\n)|\\n/, \" \");\n  options = buildOptions(options, defaultOptions, props);\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n\n//function match(xmlData){\n  for(let i=0; i< xmlData.length; i++){\n    const ch = xmlData[i];\n    if(ch === '<'){\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        /* if (currentNode.parent) {\n          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);\n        } */\n        if(currentNode){\n          if(currentNode.val){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);\n          }else{\n            currentNode.val = processTagValue(tagName, textData , options);\n          }\n        }\n\n        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {\n          currentNode.child = []\n          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}\n          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)\n        }\n        currentNode = currentNode.parent;\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n        i = findClosingIndex(xmlData, \"?>\", i, \"Pi Tag is not closed.\")\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        i = findClosingIndex(xmlData, \"-->\", i, \"Comment is not closed.\")\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"DOCTYPE is not closed.\")\n        const tagExp = xmlData.substring(i, closeIndex);\n        if(tagExp.indexOf(\"[\") >= 0){\n          i = xmlData.indexOf(\"]>\", i) + 1;\n        }else{\n          i = closeIndex;\n        }\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        //considerations\n        //1. CDATA will always have parent node\n        //2. A tag with CDATA is not a leaf node so it's value would be string type.\n        if(textData){\n          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);\n          textData = \"\";\n        }\n\n        if (options.cdataTagName) {\n          //add cdata node\n          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);\n          currentNode.addChild(childNode);\n          //for backtracking\n          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;\n          //add rest value to parent node\n          if (tagExp) {\n            childNode.val = tagExp;\n          }\n        } else {\n          currentNode.val = (currentNode.val || '') + (tagExp || '');\n        }\n\n        i = closeIndex + 2;\n      }else {//Opening tag\n        const result = closingIndexForOpeningTag(xmlData, i+1)\n        let tagExp = result.data;\n        const closeIndex = result.index;\n        const separatorIndex = tagExp.indexOf(\" \");\n        let tagName = tagExp;\n        if(separatorIndex !== -1){\n          tagName = tagExp.substr(0, separatorIndex).trimRight();\n          tagExp = tagExp.substr(separatorIndex + 1);\n        }\n\n        if(options.ignoreNameSpace){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        //save text to parent node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);\n          }\n        }\n\n        if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){//selfClosing tag\n\n          if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n            tagName = tagName.substr(0, tagName.length - 1);\n            tagExp = tagName;\n          }else{\n            tagExp = tagExp.substr(0, tagExp.length - 1);\n          }\n\n          const childNode = new xmlNode(tagName, currentNode, '');\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n        }else{//opening tag\n\n          const childNode = new xmlNode( tagName, currentNode );\n          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {\n            childNode.startIndex=closeIndex;\n          }\n          if(tagName !== tagExp){\n            childNode.attrsMap = buildAttributesMap(tagExp, options);\n          }\n          currentNode.addChild(childNode);\n          currentNode = childNode;\n        }\n        textData = \"\";\n        i = closeIndex;\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj;\n}\n\nfunction closingIndexForOpeningTag(data, i){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < data.length; index++) {\n    let ch = data[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === '>') {\n        return {\n          data: tagExp,\n          index: index\n        }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nexports.getTraversalObj = getTraversalObj;\n"},"lineCount":342}},"error":null,"hash":"bff9264610732167708d8befb3105851","cacheData":{"env":{}}}