{"id":"node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js","dependencies":[{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\ie11Sha256.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\src\\ie11Sha256.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\package.json","includedInParent":true,"mtime":1602864672900},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\.babelrc","includedInParent":true,"mtime":1602860561937},{"name":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\package.json","includedInParent":true,"mtime":1602864668972},{"name":"./isEmptyData","loc":{"line":3,"column":28},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\ie11Sha256.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\isEmptyData.js"},{"name":"./constants","loc":{"line":4,"column":26},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\ie11Sha256.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\constants.js"},{"name":"@aws-sdk/util-utf8-browser","loc":{"line":5,"column":34},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\ie11Sha256.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-sdk\\util-utf8-browser\\dist\\es\\index.js"},{"name":"@aws-sdk/util-locate-window","loc":{"line":6,"column":35},"parent":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-crypto\\sha256-browser\\build\\ie11Sha256.js","resolved":"C:\\Users\\silve\\Downloads\\s3-demo\\node_modules\\@aws-sdk\\util-locate-window\\dist\\es\\index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isEmptyData_1 = require(\"./isEmptyData\");\nvar constants_1 = require(\"./constants\");\nvar util_utf8_browser_1 = require(\"@aws-sdk/util-utf8-browser\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha256 = /** @class */ (function () {\n    function Sha256(secret) {\n        if (secret) {\n            this.operation = getKeyPromise(secret).then(function (keyData) {\n                return util_locate_window_1.locateWindow().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);\n            });\n            this.operation.catch(function () { });\n        }\n        else {\n            this.operation = Promise.resolve(util_locate_window_1.locateWindow().msCrypto.subtle.digest(\"SHA-256\"));\n        }\n    }\n    Sha256.prototype.update = function (toHash) {\n        var _this = this;\n        if (isEmptyData_1.isEmptyData(toHash)) {\n            return;\n        }\n        this.operation = this.operation.then(function (operation) {\n            operation.onerror = function () {\n                _this.operation = Promise.reject(new Error(\"Error encountered updating hash\"));\n            };\n            operation.process(toArrayBufferView(toHash));\n            return operation;\n        });\n        this.operation.catch(function () { });\n    };\n    Sha256.prototype.digest = function () {\n        return this.operation.then(function (operation) {\n            return new Promise(function (resolve, reject) {\n                operation.onerror = function () {\n                    reject(\"Error encountered finalizing hash\");\n                };\n                operation.oncomplete = function () {\n                    if (operation.result) {\n                        resolve(new Uint8Array(operation.result));\n                    }\n                    reject(\"Error encountered finalizing hash\");\n                };\n                operation.finish();\n            });\n        });\n    };\n    return Sha256;\n}());\nexports.Sha256 = Sha256;\nfunction getKeyPromise(secret) {\n    return new Promise(function (resolve, reject) {\n        var keyOperation = util_locate_window_1.locateWindow().msCrypto.subtle.importKey(\"raw\", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]);\n        keyOperation.oncomplete = function () {\n            if (keyOperation.result) {\n                resolve(keyOperation.result);\n            }\n            reject(\"ImportKey completed without importing key.\");\n        };\n        keyOperation.onerror = function () {\n            reject(\"ImportKey failed to import key.\");\n        };\n    });\n}\nfunction toArrayBufferView(data) {\n    if (typeof data === \"string\") {\n        return util_utf8_browser_1.fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n}\n"},"sourceMaps":{"js":{"version":3,"file":"ie11Sha256.js","sourceRoot":"","sources":["../src/ie11Sha256.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEmptyData } from \"./isEmptyData\";\nimport { SHA_256_HMAC_ALGO } from \"./constants\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { CryptoOperation, Key, MsWindow } from \"@aws-crypto/ie11-detection\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private operation: Promise<CryptoOperation>;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.operation = getKeyPromise(secret).then(keyData =>\n        (locateWindow() as MsWindow).msCrypto.subtle.sign(\n          SHA_256_HMAC_ALGO,\n          keyData\n        )\n      );\n      this.operation.catch(() => {});\n    } else {\n      this.operation = Promise.resolve(\n        (locateWindow() as MsWindow).msCrypto.subtle.digest(\"SHA-256\")\n      );\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash)) {\n      return;\n    }\n\n    this.operation = this.operation.then(operation => {\n      operation.onerror = () => {\n        this.operation = Promise.reject(\n          new Error(\"Error encountered updating hash\")\n        );\n      };\n      operation.process(toArrayBufferView(toHash));\n\n      return operation;\n    });\n    this.operation.catch(() => {});\n  }\n\n  digest(): Promise<Uint8Array> {\n    return this.operation.then<Uint8Array>(\n      operation =>\n        new Promise((resolve, reject) => {\n          operation.onerror = () => {\n            reject(\"Error encountered finalizing hash\");\n          };\n          operation.oncomplete = () => {\n            if (operation.result) {\n              resolve(new Uint8Array(operation.result));\n            }\n            reject(\"Error encountered finalizing hash\");\n          };\n\n          operation.finish();\n        })\n    );\n  }\n}\n\nfunction getKeyPromise(secret: SourceData): Promise<Key> {\n  return new Promise((resolve, reject) => {\n    const keyOperation = (locateWindow() as MsWindow).msCrypto.subtle.importKey(\n      \"raw\",\n      toArrayBufferView(secret),\n      SHA_256_HMAC_ALGO,\n      false,\n      [\"sign\"]\n    );\n\n    keyOperation.oncomplete = () => {\n      if (keyOperation.result) {\n        resolve(keyOperation.result);\n      }\n\n      reject(\"ImportKey completed without importing key.\");\n    };\n    keyOperation.onerror = () => {\n      reject(\"ImportKey failed to import key.\");\n    };\n  });\n}\n\nfunction toArrayBufferView(data: SourceData): Uint8Array {\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n"]}},"error":null,"hash":"3e3213403fb8796ee514dcd73e12be4d","cacheData":{"env":{}}}